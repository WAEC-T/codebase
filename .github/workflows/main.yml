name: CI Pipeline

on:
  pull_request:
    branches:
      - main  # Adjust this as needed

jobs:
  run-tests:
    runs-on: ubuntu-latest  # Underlying runner, but we'll run everything inside an Alpine container

    container:
      image: docker:dind  # Use Docker-in-Docker
      options: --privileged  # Necessary for Docker-in-Docker to work

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install required dependencies in Alpine container
      - name: Set up Alpine environment
        run: |
          apk update
          apk add --no-cache make docker-compose bash py3-pip python3-dev build-base  # Ensure build tools are available
          python3 -m venv venv  # Create a virtual environment
          ./venv/bin/pip install --upgrade pip  # Upgrade pip inside the virtual environment
          ./venv/bin/pip install --no-cache-dir -r tests/requirements.txt  # Install requirements

      # Step 3: Start the database and service
      - name: Start Services
        run: |
          docker-compose -f ./database/docker-compose.yml up -d
          docker-compose -f ./go-gorilla/docker-compose.yml up -d

      - name: Inspect Docker Network
        run: docker network inspect waect-network

      # Step 4: Wait for services to be ready
      - name: Wait for Database and Service to be Ready
        run: sleep 10

      # Step 5: Run the tests directly from the root
      - name: Run Tests
        run: ./venv/bin/pytest tests/test_api_endpoints.py

      # Step 6: Clean up containers after the test
      - name: Clean up
        run: |
          docker-compose -f ./database/docker-compose.yml down
          docker-compose -f ./go-gorilla/docker-compose.yml down